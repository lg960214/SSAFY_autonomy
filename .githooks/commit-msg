#!/bin/bash

COMMIT_CONVENTION_REGEX="^.*_.*_\(#[0-9]+(,\s*#[0-9]+)*\)$"

check_commit_convention() {
    commit_msg_file="$1"
    commit_msg=$(cat "$commit_msg_file")

    branch_name=$(git rev-parse --abbrev-ref HEAD)

    if ! [[ $commit_msg =~ $COMMIT_CONVENTION_REGEX ]]; then
        echo -e "\nError : 커밋 메세지 형식을 지켜주세요.\n\n============================\n커밋 컨벤션 : (이모티콘)_커밋 내용_(#이슈번호, #이슈번호, ...)\n주어진 내용 : $commit_msg\n==========================="
        exit 1
    fi

    echo -e "\n============================\nCommit Convention 검사 완료!\n============================"

	echo -e "\n============================\nJira Issue Ticket 생성 중...\n\n"

    if [[ $branch_name == feature/* ]]; then
        jira_ticket=$(echo "$branch_name" | sed -n 's/feature\/\([0-9a-zA-Z]*\)/\1/p')

        if [ -z "$jira_ticket" ]; then
            echo "Error: Could not extract issue number from branch name.\n============================"
            exit 1
        else
            # Append the extracted issue numbers to the commit message
            commit_msg="$commit_msg (#$jira_ticket)"

            # Replace the existing commit message with the new one
            echo "$commit_msg" > "$commit_msg_file"

            echo -e "Jira Issue Ticket 생성 완료!\n==========================="
        fi
	else
		echo -e "Jira Issue Ticket 생성 불가\nBranch_name: $branch_name\n===========================\n"
    fi
}

commit_msg_file="$1"

check_commit_convention "$commit_msg_file"

exit 0
